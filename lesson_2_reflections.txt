What happens when you initialize a repository? Why do you need to do it?

When you first initialize a repository, git adds a .git file to you directory,I'm guessing this connects the directory to git or gives it a file so git understands its a repository.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is different from the directory because it is set to be commited to the repository while the directory is just on your computer. It is also not like the repository because it hasn't been commited yet so any changes wont be saved to git. The value this offers is that if you only change one file from the whole repository you don't have to resave every file, the system can just copy and paste all the unedited files from the last commit. Also it gives you a chance to change your mind incase you realize the file shouldn't be commited.


How can you use the staging area to make sure you have one commmit per logical change?

Once you have your changed files in the staging area you can you git diff and git diff --staged to see what is different between the version in the directory, staging area, and respoitory. Once you are looking at these diffences you can verity that these changes are all part of one logical change.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Situations when branches would be helpful in keeping your history organized are when you are trying a new part of the program that isn't neccessary, if there are more then one person working on a project you could organize what everyone is doing. by keeping parts of the code seperate, you could work in two different ways without fear of having them effect one another.


How do the diagrams help you visuazlize the branch structure?

The diagrams show how each branch and commit are connected to each other this can explain why certain commits aren't showing up on the log, why there is a missing feature in a commit, and how to get back to a commit.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result is that it combines the two branches into one so that all the commits are accessable under one branch and orders them by time commited. We represent it in the diagram the way we do because it is an easy was to visually understand what is going on and how it affects the branch.


What are the pros and cons of Git's automatic merging vs. always doing merges maunually?

Git will auto merge when there are no conflicts as in the codes don't obivously interfer with one another. When there is a conflict it makes the programmer manually merge this means the programmer has to go into the code and assess what the differences are in the code and how best to update the code so that a merge can happen. This keeps the computer from making any big mistakes contiuously, but does mean the programmers have to go through others codes and adjust on occatuion. This can add time to projects.


